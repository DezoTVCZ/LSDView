using System.Collections.Generic;
using System.Drawing;
using System.Text;
using LSDView.Math;
using OpenTK;
using OpenTK.Graphics.OpenGL;

namespace LSDView.Util
{
    public class PlyBuilder
    {
        private StringBuilder _builder;

        public PlyBuilder()
        {
            _builder = new StringBuilder();
        }

        public PlyBuilder WriteHeader(int verts, int faces)
        {
        _builder.AppendLine($"ply\nformat ascii 1.0\n" + // Required header data
            // The first two lines of any PLY file *MUST* be "ply", followed by the format.
            $"comment Generated by LSDView {Version.String}, created by Figglewatts, 2020\n" +
            $"comment LSDView may be found at https://github.com/Figglewatts/LSDView \n" +
            $"element vertex {verts}\n" + // Vertex Count
            $"property float x\nproperty float y\nproperty float z\n" + // Vertex Positions
            $"property float nx\nproperty float ny\nproperty float nz\n" + // Vertex Normals
            $"property float s\nproperty float t\n" + // Scale
            $"property uchar red\nproperty uchar green\nproperty uchar blue\nproperty uchar a\n" + // Vertex Colors
            $"element face {faces}\nproperty list uchar uint vertex_indices\n" + // Face indices
            $"end_header"); // Yes, this looks messy. This is just how PLY works
            return this;
        }

        public PlyBuilder BuildVertexElement(Vector3 pos, Vector3 normal, Vector2 uv, Vector4 col)
        {
            _builder.AppendLine($"{pos.X} {pos.Y} {pos.Z}" +
                $" {normal.X} {normal.Y} {normal.Z}" +
                $" {uv.X} {uv.Y}" +
                $" {Convert.ToByte(col.X)} {Convert.ToByte(col.Y)} {Convert.ToByte(col.Z)} {Convert.ToByte(col.W)}");
            return this;
        }

        public PlyBuilder BuildFaceElement(int vert1, int vert2, int vert3)
        {
            // the first number is how many vertices there are per face. Manually assigning 3 to make it all triangles.
            _builder.AppendLine($"3 {vert1} {vert2} {vert3}");

            return this;
        }

        public PlyBuilder Comment(string comment)
        {
            _builder.AppendLine($"comment {comment}");
            return this;
        }

        public override string ToString()
        {
            return _builder.ToString();
        }
    }

}
